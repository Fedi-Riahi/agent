# Generated by Django 5.2.1 on 2025-05-28 00:20

import agent.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Governorate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=2, unique=True)),
                ('delivery_surcharge', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional delivery cost for this governorate', max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='MerchantWebsite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('base_url', models.URLField(unique=True)),
                ('website_type', models.CharField(choices=[('ECOMMERCE', 'E-commerce Platform'), ('MARKETPLACE', 'Online Marketplace'), ('RETAILER', 'Retailer Website')], default='ECOMMERCE', max_length=20)),
                ('requires_login', models.BooleanField(default=False)),
                ('supports_guest_checkout', models.BooleanField(default=False)),
                ('scraping_config', models.JSONField()),
                ('active', models.BooleanField(default=True)),
                ('priority', models.PositiveSmallIntegerField(default=1, help_text='Priority for scraping (higher numbers are scraped first)')),
                ('last_scraped', models.DateTimeField(blank=True, null=True)),
                ('scraping_interval', models.PositiveIntegerField(default=3600, help_text='Minimum seconds between scrapes')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('keywords', models.JSONField(default=list, help_text='List of search keywords for this category')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='agent.productcategory')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('model_number', models.CharField(blank=True, max_length=50)),
                ('specifications', models.JSONField(default=dict)),
                ('image_url', models.URLField(blank=True, validators=[django.core.validators.URLValidator()])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='agent.productcategory')),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_price', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('payment_method', models.CharField(choices=[('KONNECT', 'Konnect'), ('CARD', 'Credit Card'), ('CASH', 'Cash on Delivery'), ('INSTALLMENT', 'Installment')], default='KONNECT', max_length=20)),
                ('konnect_payment_id', models.CharField(blank=True, max_length=100)),
                ('payment_status', models.CharField(blank=True, max_length=50)),
                ('payment_response', models.JSONField(blank=True, null=True)),
                ('shipping_address', models.TextField()),
                ('contact_phone', agent.models.TunisianPhoneField(max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be in the format +216XXXXXXXX', regex='^\\+216\\d{8}$')])),
                ('special_instructions', models.TextField(blank=True)),
                ('is_business', models.BooleanField(default=False)),
                ('business_registration', models.CharField(blank=True, max_length=50)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('tracking_url', models.URLField(blank=True)),
                ('estimated_delivery', models.DateField(blank=True, null=True)),
                ('governorate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='agent.governorate')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='agent.product')),
                ('selected_website', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='agent.merchantwebsite')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentDecisionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision_reason', models.TextField()),
                ('considered_options', models.JSONField()),
                ('gemini_response', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('execution_time', models.FloatField(help_text='Decision time in seconds')),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence in the decision (0-1)', null=True)),
                ('alternatives_considered', models.PositiveIntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decision_logs', to='agent.purchaseorder')),
            ],
            options={
                'verbose_name': 'Agent Decision Log',
                'verbose_name_plural': 'Agent Decision Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='RUNNING', max_length=20)),
                ('products_scraped', models.PositiveIntegerField(default=0)),
                ('new_products_found', models.PositiveIntegerField(default=0)),
                ('price_changes_detected', models.PositiveIntegerField(default=0)),
                ('errors_encountered', models.PositiveIntegerField(default=0)),
                ('session_log', models.TextField(blank=True)),
                ('website', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agent.merchantwebsite')),
            ],
        ),
        migrations.CreateModel(
            name='MerchantAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('SELLER', 'Seller Account'), ('AFFILIATE', 'Affiliate Account'), ('API', 'API Access')], default='SELLER', max_length=20)),
                ('username', models.CharField(max_length=100)),
                ('encrypted_password', models.CharField(max_length=255)),
                ('cookies', models.JSONField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('rate_limit', models.PositiveIntegerField(default=10, help_text='Requests per minute')),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='merchant_accounts', to=settings.AUTH_USER_MODEL)),
                ('website', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agent.merchantwebsite')),
            ],
            options={
                'verbose_name': 'Merchant Account',
                'verbose_name_plural': 'Merchant Accounts',
                'unique_together': {('user', 'website', 'account_type')},
            },
        ),
        migrations.CreateModel(
            name='PriceComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=3, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_price', models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='TND', max_length=3)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('availability', models.BooleanField(default=True)),
                ('availability_text', models.CharField(blank=True, max_length=100)),
                ('delivery_days', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('shipping_cost', models.DecimalField(decimal_places=3, default=0, max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('product_url', models.URLField(blank=True, max_length=500, validators=[django.core.validators.URLValidator()])),
                ('image_url', models.URLField(blank=True, max_length=500, validators=[django.core.validators.URLValidator()])),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated discount percentage', max_digits=5, null=True)),
                ('warranty', models.CharField(blank=True, max_length=100)),
                ('stock_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('website', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agent.merchantwebsite')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_comparisons', to='agent.product')),
            ],
            options={
                'verbose_name': 'Price Comparison',
                'verbose_name_plural': 'Price Comparisons',
                'ordering': ['timestamp'],
                'get_latest_by': 'timestamp',
                'unique_together': {('product', 'website', 'timestamp')},
            },
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['status', 'created_at'], name='agent_purch_status_82440c_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['user', 'created_at'], name='agent_purch_user_id_a55c49_idx'),
        ),
    ]
